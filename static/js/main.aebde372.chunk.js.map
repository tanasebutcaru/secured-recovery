{"version":3,"sources":["utils/crypto-js.js","utils/encrypt-secret.js","utils/common.js","pages/Encrypt.js","pages/Decrypt.js","App.js","index.js"],"names":["encryptData","plainMessage","encKey","AES","encrypt","toString","setChunkIdData","encryptedDataChunk","currentChunk","totalChunks","splitEncryptedData","encryptedData","chunks","encryptedDataChunks","chunkLength","Math","ceil","length","chunkBeginIndex","encryptedChunk","slice","push","data","encryptSecret","secret","key","a","encryptedResult","error","errorMsg","encryptedSecret","map","chunk","QRCode","toDataURL","qrcodeDataURL","message","autoSizeTextarea","textareaRef","offsetHeight","style","height","scrollHeight","Encrypt","useForm","register","setValue","setFocus","handleSubmit","reset","useState","showEncryptionKey","setShowEncryptionKey","encryptionChunks","setEncryptionChunks","setEncryptedResult","hasResult","setHasResult","chunkDataRefs","useRef","formSubmit","e","encryptionKey","parseInt","current","forEach","chunkDataRef","toggleEncryptionKeyVisibility","prevState","onSubmit","startOverClean","selectChunkDataContent","chunkIndex","contentLength","focus","setSelectionRange","className","htmlFor","id","required","disabled","rows","valueAsNumber","min","max","step","type","value","onChange","target","path","mdiEyeOff","size","onClick","title","mdiEye","mdiChevronDoubleDown","mdiAlert","item","index","src","alt","chunkNumber","chunkQRCodeDataURL","aElement","document","createElement","href","setAttribute","click","downloadQRCodeChunk","mdiDownload","ref","readOnly","chunkSecretData","errorMessage","navigator","clipboard","writeText","then","alert","catch","copySecretChunkToClipboard","mdiContentCopy","INPUT_TYPE","Decrypt","unregister","chunkState","setChunkState","qrcodeFiles","handleInputTypeChange","inputTypeId","input","unregisterFields","console","log","isQRCodeInputSelected","isTextInputSelected","displayChunkStats","chunkStatsCurrent","chunkStatsTotal","hasOnlyOneChunk","mdiQrcode","mdiText","encryptedSecretChunkFormFieldRender","App","to","activeClassName","exact","mdiLock","mdiLockOpenVariant","from","process","rel","mdiGithub","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aebde372.chunk.js","sourcesContent":["import { AES, enc } from 'crypto-js';\n\nexport const encryptData = (plainMessage, encKey) => {\n  return AES.encrypt(plainMessage, encKey).toString();\n};\n\nexport const decryptData = (encryptedMessage, decKey) => {\n  return AES.decrypt(encryptedMessage, decKey).toString(enc.Utf8);\n};\n\nconst setChunkIdData = (encryptedDataChunk, currentChunk, totalChunks) => `${encryptedDataChunk}/c${currentChunk}t${totalChunks}==`;\n\n// const extractChunkIdData = (encryptedDataChunk) => {\n//   const chunkIdDataRegex = /\\/c([0-9])t([0-9])==$/;\n//   const chunkIdDataResult = encryptedDataChunk.match(chunkIdDataRegex);\n\n//   if (chunkIdDataResult === null) {\n//     return { currentChunk: -1, totalChunks: -1 };\n//   }\n\n//   return { currentChunk: chunkIdDataResult[1], totalChunks: chunkIdDataResult[2] };\n// }\n\nexport const splitEncryptedData = (encryptedData, chunks) => {\n  const encryptedDataChunks = [];\n  const totalChunks = chunks <= 0 ? 1 : chunks;\n  const chunkLength = Math.ceil(encryptedData.length / chunks);\n  \n  for (let currentChunk = 1, chunkBeginIndex = 0; totalChunks >= currentChunk; currentChunk++, chunkBeginIndex += chunkLength) {\n    const encryptedChunk = encryptedData.slice(chunkBeginIndex, chunkBeginIndex + chunkLength);\n    encryptedDataChunks.push({\n      data: setChunkIdData(encryptedChunk, currentChunk, totalChunks)\n    });\n  };\n\n  return encryptedDataChunks;\n};\n","import QRCode from 'qrcode';\nimport { encryptData, splitEncryptedData } from './crypto-js';\n\nexport default async function encryptSecret(secret, key, chunks) {\n  const encryptedResult = { error: false, errorMsg: '', chunks: [] };\n  const encryptedSecret = encryptData(secret, key);\n  const encryptedSecretChunks = splitEncryptedData(encryptedSecret, chunks);\n\n  encryptedSecretChunks.map(async chunk => {\n    try {\n      encryptedResult.chunks.push({\n        ...chunk,\n        qrcodeDataURL: await QRCode.toDataURL(chunk.data)\n      });\n    } catch (err) {\n      encryptedResult.error = true;\n      encryptedResult.errorMsg = err.message;\n    }\n  });\n\n  return encryptedResult;\n};\n","export const autoSizeTextarea = (textareaRef, offsetHeight = 5) => {\n  textareaRef.style.height = \"auto\";\n  textareaRef.style.height = (textareaRef.scrollHeight + offsetHeight) + \"px\";\n};\n","import React, { useState, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Icon from '@mdi/react';\nimport { mdiEye, mdiEyeOff, mdiDownload, mdiAlert, mdiChevronDoubleDown, mdiContentCopy } from '@mdi/js';\nimport encryptSecret from '../utils/encrypt-secret';\nimport { autoSizeTextarea } from '../utils/common';\nimport '../styles/encrypt.scss';\n\nfunction Encrypt() {\n  const { register, setValue, setFocus, handleSubmit, reset } = useForm();\n  const [showEncryptionKey, setShowEncryptionKey] = useState(false);\n  const [encryptionChunks, setEncryptionChunks] = useState(1);\n  const [encryptedResult, setEncryptedResult] = useState({ error: false, errorMsg: '', chunks: [] });\n  const [hasResult, setHasResult] = useState(false);\n  const chunkDataRefs = useRef([]);\n\n  const formStartOver = (startOverClean) => {\n    setHasResult(false);\n    chunkDataRefs.current = [];\n  \n    if (startOverClean) {\n      setValue('encryptionChunks', 1);\n      setEncryptionChunks(1);\n      reset();\n    }\n  };\n\n  const formSubmit = async (data, e) => {\n    setEncryptedResult(await encryptSecret(data.secret, data.encryptionKey, parseInt(data.encryptionChunks, 10)));\n    setHasResult(true);\n\n    // autosize all chunk data secrets based on content length\n    chunkDataRefs.current.forEach(chunkDataRef => autoSizeTextarea(chunkDataRef));\n  };\n\n  const handleEncryptionChunksChange = (e) => {\n    setValue('encryptionChunks', e.target.value);\n    setEncryptionChunks(e.target.value);\n    setFocus('encryptionChunks');\n  };\n\n  const toggleEncryptionKeyVisibility = () => setShowEncryptionKey(prevState => !prevState);\n  const onSubmit = async (data, e) => hasResult ? formStartOver(data.startOverClean) : await formSubmit(data, e);\n\n  const downloadQRCodeChunk = (chunkNumber, chunkQRCodeDataURL) => {\n    const aElement = document.createElement(\"a\");\n    aElement.href = chunkQRCodeDataURL;\n    aElement.setAttribute(\"download\", `encrypted-secret-chunk-${chunkNumber}-qrcode.png`);\n    aElement.click();\n  };\n\n  const copySecretChunkToClipboard = (chunkNumber, chunkSecretData) => {\n    const errorMessage = `Could not copy encrypted secret chunk #${chunkNumber} to clipboard. Please try again or perform a manual copy!`;\n\n    try {\n      navigator.clipboard.writeText(chunkSecretData)\n        .then(() => alert(`Encrypted secret chunk #${chunkNumber} successfully copied to clipboard!`))\n        .catch(error => alert(errorMessage)); // This will be the case for mobile devices\n    } catch(error) {\n      alert(errorMessage); // This will be the case for older/unsecured browsers\n    }\n\n    selectChunkDataContent(chunkNumber, chunkSecretData.length);\n  };\n\n  const selectChunkDataContent = (chunkIndex, contentLength) => {\n    try {\n      chunkDataRefs.current[chunkIndex].focus();\n      chunkDataRefs.current[chunkIndex].setSelectionRange(0, contentLength);\n    } catch(error) {\n      // do nothing. \n    }\n  };\n  \n  return (\n    <>\n      <form className=\"encrypt-form\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"secret-field form-field\">\n          <label htmlFor=\"secret\">The secret *:</label>\n          <textarea id=\"secret\" {...register('secret', { required: true, disabled: hasResult })} rows=\"10\"/>\n        </div>\n        <div className=\"encryption-settings-submit-group\">\n          <div className=\"encryption-chunks-field form-field\">\n            <label htmlFor=\"encryptionChunks\">Split result in chunks:</label>\n            <input id=\"encryptionChunks\" {...register('encryptionChunks', { required: true, valueAsNumber: true, disabled: hasResult })} min=\"1\" max=\"9\" step=\"1\" type=\"range\" value={encryptionChunks} onChange={handleEncryptionChunksChange} />\n            <span className=\"encryption-chunks-value\">{encryptionChunks}</span>\n          </div>\n          <div className=\"encryption-key-field form-field\">\n            <label htmlFor=\"encryptionKey\">Encryption key *:</label>\n            <input id=\"encryptionKey\" {...register('encryptionKey', { required: true, disabled: hasResult })} type={ showEncryptionKey ? 'text' : 'password' } />\n            {showEncryptionKey && <Icon path={mdiEyeOff} size={1.2} onClick={toggleEncryptionKeyVisibility} title=\"Hide encryption key\" />}\n            {!showEncryptionKey && <Icon path={mdiEye} size={1.2} onClick={toggleEncryptionKeyVisibility} title=\"Show encryption key\" />}\n          </div>\n          <button\n            type=\"submit\"\n            className={hasResult ? 'form-start-over-btn' : 'form-submit-btn'}>\n              {hasResult ? 'Start Over' : 'Encrypt Secret'}\n          </button>\n          {hasResult && <div className=\"encryption-startover-clean\">\n            <input id=\"startOverClean\" {...register('startOverClean', { required: false })} type=\"checkbox\" />\n            <label htmlFor=\"startOverClean\">Clean Start Over?</label>\n          </div>}\n        </div>\n      </form>\n      {hasResult && (\n        <div className=\"encrypted-secret\">\n          <small className=\"notice\">\n            <Icon path={mdiChevronDoubleDown} size={1} title=\"See result below\" />\n            <span>Encrypted Secret</span>\n            <Icon path={mdiChevronDoubleDown} size={1} title=\"See result below\" />\n          </small>\n          {encryptedResult.error && (\n            <div className=\"encrypted-result-error\">\n              <Icon path={mdiAlert} size={2} onClick={toggleEncryptionKeyVisibility} title=\"Error while encrypting secret\" />\n              <span>{encryptedResult.errorMsg}</span>\n            </div>\n          )}\n          {encryptedResult.chunks.length && (\n          <div className={`encrypted-result-success ${encryptedResult.chunks.length === 1 ? 'one-chunk': ''}`}>\n            {encryptedResult.chunks.map((item, index) => (\n              <div className={`encrypted-result-chunk chunk-${index+1}`} key={index}>\n                <div className=\"chunk-number\">Encrypted Secret | Chunk #{index+1}</div>\n                <img className=\"chunk-qrcode-img\" src={item.qrcodeDataURL} alt={`QRCode Chunk #${index+1}`}></img>\n                <div className=\"chunk-operations\">\n                  <button className=\"chunk-qrcode-download\" type=\"button\" onClick={() => downloadQRCodeChunk(index+1, item.qrcodeDataURL)}>\n                    <Icon path={mdiDownload} size={1} title=\"Download\" />\n                    <span>Download QRCode #{index+1}</span>\n                  </button>\n                  <div className=\"chunk-ops-andor\">and/or</div>\n                  <textarea\n                    className=\"chunk-data\"\n                    value={item.data}\n                    ref={ref => chunkDataRefs.current[index+1] = ref}\n                    onClick={() => selectChunkDataContent(index+1, item.data.length)}\n                    readOnly>\n                  </textarea>\n                  <button className=\"chunk-secret-copy\" type=\"button\" onClick={() => copySecretChunkToClipboard(index+1, item.data)}>\n                    <Icon path={mdiContentCopy} size={1} title=\"Copy\" />\n                    <span>Copy Text #{index+1}</span>\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Encrypt;\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Icon from '@mdi/react';\nimport { mdiQrcode, mdiText } from '@mdi/js';\nimport '../styles/decrypt.scss';\n\nconst INPUT_TYPE = {\n  QRCODE: 1,\n  TEXT: 2,\n};\n\nfunction Decrypt() {\n  const { register, unregister, handleSubmit, reset } = useForm();\n  const [chunkState, setChunkState] = useState({});\n  const [qrcodeFiles, setQRCodeFiles] = useState({});\n  const [hasResult, setHasResult] = useState(false);\n\n  const handleInputTypeChange = (chunkNumber, inputTypeId) => {\n    if (chunkState[chunkNumber]?.input === inputTypeId) return;\n\n    // Unregister fields when switching input type in order to avoid req/(un)controlled fields errors\n    const unregisterFields = inputTypeId === INPUT_TYPE.TEXT ? [`qrcodeChunk${chunkNumber}`] : [`dataChunk${chunkNumber}`];\n    unregister(unregisterFields);\n\n    setChunkState(prevState => ({\n      ...prevState,\n      [chunkNumber]: {\n        ...prevState[chunkNumber],\n        input: inputTypeId\n      },\n    }))\n  };\n\n  const onSubmit = async (data, e) => {\n    console.log('decrypt form dataa ---- ', data);\n  };\n\n  const encryptedSecretChunkFormFieldRender = (chunkNumber) => {\n    const isQRCodeInputSelected = chunkState[chunkNumber]?.input === INPUT_TYPE.QRCODE;\n    const isTextInputSelected = chunkState[chunkNumber]?.input === INPUT_TYPE.TEXT;\n\n    const displayChunkStats = isQRCodeInputSelected || isTextInputSelected;\n    const chunkStatsCurrent = chunkState[chunkNumber]?.chunkStatsCurrent || 1;\n    const chunkStatsTotal = chunkState[chunkNumber]?.chunkStatsTotal || '?';\n    const hasOnlyOneChunk = chunkStatsTotal === 1 || chunkStatsTotal === '?';\n    \n    return (\n      <div className={`encrypted-secret-chunk ${hasOnlyOneChunk ? 'one-chunk': ''}`}>\n        <div className=\"chunk-label\">Encrypted secret | Chunk #{chunkNumber}</div>\n        <div className=\"chunk-input-type\">\n          <button type=\"button\" className={`qrcode-input-type ${isQRCodeInputSelected ? 'active' : ''}`} onClick={() => handleInputTypeChange(chunkNumber, INPUT_TYPE.QRCODE)}>\n            <Icon path={mdiQrcode} size={3} title=\"Encrypted Secret - QRCode\" />\n            <span>QRCode #{chunkNumber}</span>\n          </button>\n          <button type=\"button\" className={`data-input-type ${isTextInputSelected ? 'active' : ''}`} onClick={() => handleInputTypeChange(chunkNumber, INPUT_TYPE.TEXT)}>\n            <Icon path={mdiText} size={3} title=\"Encrypted Secret - Text\" />\n            <span>Text #{chunkNumber}</span>\n          </button>\n        </div>\n        {isQRCodeInputSelected && <div className=\"chunk-input-view qrcode\">\n          <button type=\"button\">remove qrcode selection</button>\n          <input type=\"file\" value={qrcodeFiles[`qrcodeChunk${chunkNumber}`]} {...register(`qrcodeChunk${chunkNumber}`, { required: true, disabled: hasResult })} />\n        </div>}\n        {isTextInputSelected &&<div className=\"chunk-input-view data\">\n          <textarea {...register(`dataChunk${chunkNumber}`, { required: true, disabled: hasResult })} rows=\"10\"/>\n        </div>}\n        {displayChunkStats && <div className=\"chunk-stats\">{chunkStatsCurrent} / {chunkStatsTotal}</div>}\n      </div>\n    )\n  };\n\n  return (\n    <>\n      <form className=\"decrypt-form\" onSubmit={handleSubmit(onSubmit)}>\n        {encryptedSecretChunkFormFieldRender(1)}\n        ---- TODO: dynamic fields based on first chunk.\n        <button\n          type=\"submit\"\n          className={hasResult ? 'form-start-over-btn' : 'form-submit-btn'}>\n            {hasResult ? 'Start Over' : 'Decrypt Secret'}\n        </button>\n        {hasResult && <div className=\"decryption-startover-clean\">\n          <input id=\"startOverClean\" {...register('startOverClean', { required: false })} type=\"checkbox\" />\n          <label htmlFor=\"startOverClean\">Clean Start Over?</label>\n        </div>}\n      </form>\n    </>\n  );\n}\n\nexport default Decrypt;\n","import React from \"react\";\nimport { HashRouter, Switch, Route, NavLink, Redirect } from \"react-router-dom\";\nimport Icon from '@mdi/react';\nimport { mdiLock , mdiLockOpenVariant, mdiGithub } from '@mdi/js';\nimport Encrypt from './pages/Encrypt';\nimport Decrypt from './pages/Decrypt';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <header>\n        <div className=\"app-name\">Secured Recovery</div>\n        <nav>\n          <ul>\n            <li>\n              <NavLink to=\"/encrypt\" activeClassName=\"is-active\" exact={true}>\n                <Icon path={mdiLock} size={1}/>\n                <span>Encrypt</span>\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/decrypt\" activeClassName=\"is-active\" exact={true}>\n                <Icon path={mdiLockOpenVariant} size={1}/>\n                <span>Decrypt</span>\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n      </header>\n      <main className=\"content\">\n        <Switch>\n          <Redirect exact from=\"/\" to=\"/encrypt\" />\n          <Route path=\"/encrypt\">\n            <Encrypt />\n          </Route>\n          <Route path=\"/decrypt\">\n            <Decrypt />\n          </Route>\n        </Switch>\n      </main>\n      <footer>\n        <small className=\"copyright\">\n          <span>\n            &copy; Tanase Butcaru / MIT License / Secured Recovery v{process.env.REACT_APP_VERSION}\n          </span>\n          <a href=\"https://github.com/tbutcaru/secured-recovery\" target=\"_blank\" rel=\"noreferrer\" title=\"Secured Recovery on GitHub\">\n            <Icon path={mdiGithub} size={1}/>\n          </a>\n        </small>\n      </footer>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}