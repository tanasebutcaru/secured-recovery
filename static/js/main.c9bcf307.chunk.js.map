{"version":3,"sources":["utils/crypto-js.js","utils/encrypt-secret.js","pages/Encrypt.js","pages/Decrypt.js","App.js","index.js"],"names":["encryptData","plainMessage","encKey","AES","encrypt","toString","setChunkIdData","encryptedDataChunk","currentChunk","totalChunks","splitEncryptedData","encryptedData","chunks","encryptedDataChunks","chunkLength","Math","ceil","length","chunkBeginIndex","encryptedChunk","slice","push","data","encryptSecret","secret","key","a","encryptedResult","error","errorMsg","encryptedSecret","map","chunk","QRCode","toDataURL","qrcodeDataURL","message","Encrypt","useForm","register","setValue","handleSubmit","reset","useState","showEncryptionKey","setShowEncryptionKey","encryptionChunksValue","setEncryptionChunksValue","setEncryptedResult","hasResult","setHasResult","formSubmit","encryptionKey","parseInt","encryptionChunks","toggleEncryptionKeyVisibility","prevState","className","onSubmit","startOverClean","htmlFor","id","required","disabled","rows","min","max","step","value","type","onChange","e","target","path","mdiEyeOff","size","onClick","title","mdiEye","mdiChevronDoubleDown","mdiAlert","item","index","src","alt","chunkNumber","chunkQRCodeDataURL","aElement","document","createElement","href","setAttribute","click","downloadQRCodeChunk","mdiDownload","chunkSecretData","navigator","clipboard","writeText","alert","mdiContentCopy","Decrypt","App","to","activeClassName","exact","mdiLock","mdiLockOpenVariant","render","process","rel","mdiGithub","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9bcf307.chunk.js","sourcesContent":["import { AES, enc } from 'crypto-js';\n\nexport const encryptData = (plainMessage, encKey) => {\n  return AES.encrypt(plainMessage, encKey).toString();\n};\n\nexport const decryptData = (encryptedMessage, decKey) => {\n  return AES.decrypt(encryptedMessage, decKey).toString(enc.Utf8);\n};\n\nconst setChunkIdData = (encryptedDataChunk, currentChunk, totalChunks) => `${encryptedDataChunk}/c${currentChunk}t${totalChunks}==`;\n\n// const extractChunkIdData = (encryptedDataChunk) => {\n//   const chunkIdDataRegex = /\\/c([0-9])t([0-9])==$/;\n//   const chunkIdDataResult = encryptedDataChunk.match(chunkIdDataRegex);\n\n//   if (chunkIdDataResult === null) {\n//     return { currentChunk: -1, totalChunks: -1 };\n//   }\n\n//   return { currentChunk: chunkIdDataResult[1], totalChunks: chunkIdDataResult[2] };\n// }\n\nexport const splitEncryptedData = (encryptedData, chunks) => {\n  const encryptedDataChunks = [];\n  const totalChunks = chunks <= 0 ? 1 : chunks;\n  const chunkLength = Math.ceil(encryptedData.length / chunks);\n  \n  for (let currentChunk = 1, chunkBeginIndex = 0; totalChunks >= currentChunk; currentChunk++, chunkBeginIndex += chunkLength) {\n    const encryptedChunk = encryptedData.slice(chunkBeginIndex, chunkBeginIndex + chunkLength);\n    encryptedDataChunks.push({\n      data: setChunkIdData(encryptedChunk, currentChunk, totalChunks)\n    });\n  };\n\n  return encryptedDataChunks;\n};\n","import QRCode from 'qrcode';\nimport { encryptData, splitEncryptedData } from './crypto-js';\n\nexport default async function encryptSecret(secret, key, chunks) {\n  const encryptedResult = { error: false, errorMsg: '', chunks: [] };\n  const encryptedSecret = encryptData(secret, key);\n  const encryptedSecretChunks = splitEncryptedData(encryptedSecret, chunks);\n\n  encryptedSecretChunks.map(async chunk => {\n    try {\n      encryptedResult.chunks.push({\n        ...chunk,\n        qrcodeDataURL: await QRCode.toDataURL(chunk.data)\n      });\n    } catch (err) {\n      encryptedResult.error = true;\n      encryptedResult.errorMsg = err.message;\n    }\n  });\n\n  return encryptedResult;\n};\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Icon from '@mdi/react';\nimport { mdiEye, mdiEyeOff, mdiDownload, mdiAlert, mdiChevronDoubleDown, mdiContentCopy } from '@mdi/js';\nimport encryptSecret from '../utils/encrypt-secret';\nimport '../styles/encrypt.scss';\n\nfunction Encrypt() {\n  const { register, setValue, handleSubmit, reset } = useForm();\n  const [showEncryptionKey, setShowEncryptionKey] = useState(false);\n  const [encryptionChunksValue, setEncryptionChunksValue] = useState(1);\n  const [encryptedResult, setEncryptedResult] = useState({ error: false, errorMsg: '', chunks: [] });\n  const [hasResult, setHasResult] = useState(false);\n\n  const formStartOver = (startOverClean) => {\n    setHasResult(false);\n  \n    if (startOverClean) {\n      setValue('encryptionChunks', 1);\n      setEncryptionChunksValue(1);\n      reset();\n    }\n  };\n\n  const formSubmit = async (data) => {\n    setEncryptedResult(await encryptSecret(data.secret, data.encryptionKey, parseInt(data.encryptionChunks, 10)));\n    setHasResult(true);\n  };\n\n  const handleEncryptionChunksChange = (e) => setEncryptionChunksValue(e.target.value);\n  const toggleEncryptionKeyVisibility = () => setShowEncryptionKey(prevState => !prevState);\n  const onSubmit = data => hasResult ? formStartOver(data.startOverClean) : formSubmit(data);\n\n  const downloadQRCodeChunk = (chunkNumber, chunkQRCodeDataURL) => {\n    const aElement = document.createElement(\"a\");\n    aElement.href = chunkQRCodeDataURL;\n    aElement.setAttribute(\"download\", `encrypted-secret-chunk-${chunkNumber}-qrcode.png`);\n    aElement.click();\n  };\n\n  const copySecretChunkToClipboard = (chunkNumber, chunkSecretData) => {\n    navigator.clipboard.writeText(chunkSecretData);\n    alert(`Encrypted secret chunk #${chunkNumber} copied to clipboard!`);\n  };\n  \n  return (\n    <>\n      <form className=\"encrypt-form\" onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"secret-field form-field\">\n          <label htmlFor=\"secret\">The secret *:</label>\n          <textarea id=\"secret\" {...register('secret', { required: true, disabled: hasResult })} rows=\"10\"/>\n        </div>\n        <div className=\"encryption-settings-submit-group\">\n          <div className=\"encryption-chunks-field form-field\">\n            <label htmlFor=\"encryptionChunks\">Split result in chunks:</label>\n            <input id=\"encryptionChunks\" {...register('encryptionChunks', { disabled: hasResult })} min=\"1\" max=\"9\" step=\"1\" value={encryptionChunksValue} type=\"range\" onChange={handleEncryptionChunksChange} />\n            <span className=\"encryption-chunks-value\">{encryptionChunksValue}</span>\n          </div>\n          <div className=\"encryption-key-field form-field\">\n            <label htmlFor=\"encryptionKey\">Encryption key *:</label>\n            <input id=\"encryptionKey\" {...register('encryptionKey', { required: true, disabled: hasResult })} type={ showEncryptionKey ? 'text' : 'password' } />\n            {showEncryptionKey && <Icon path={mdiEyeOff} size={1.2} onClick={toggleEncryptionKeyVisibility} title=\"Hide encryption key\" />}\n            {!showEncryptionKey && <Icon path={mdiEye} size={1.2} onClick={toggleEncryptionKeyVisibility} title=\"Show encryption key\" />}\n          </div>\n          <button type=\"submit\" className={hasResult ? 'form-start-over-btn' : 'form-submit-btn'}>{hasResult ? 'Start Over' : 'Encrypt Secret'}</button>\n          {hasResult && <div className=\"encryption-startover-clean\">\n            <input id=\"startOverClean\" {...register('startOverClean', { required: false })} type=\"checkbox\" />\n            <label htmlFor=\"startOverClean\">Clean Start Over?</label>\n          </div>}\n        </div>\n      </form>\n      {hasResult && (\n        <div className=\"encrypted-secret\">\n          <small className=\"notice\">\n            <Icon path={mdiChevronDoubleDown} size={1} title=\"See result below\" />\n            <span>Encrypted Secret</span>\n            <Icon path={mdiChevronDoubleDown} size={1} title=\"See result below\" />\n          </small>\n          {encryptedResult.error && (\n            <div className=\"encrypted-result-error\">\n              <Icon path={mdiAlert} size={2} onClick={toggleEncryptionKeyVisibility} title=\"Error while encrypting secret\" />\n              <span>{encryptedResult.errorMsg}</span>\n            </div>\n          )}\n          {encryptedResult.chunks.length && (\n          <div className={`encrypted-result-success ${encryptedResult.chunks.length === 1 ? 'one-chunk': ''}`}>\n            {encryptedResult.chunks.map((item, index) => (\n              <div className={`encrypted-result-chunk chunk-${index+1}`} key={index}>\n                <div className=\"chunk-number\">Encrypted Secret Chunk #{index+1}</div>\n                <img className=\"chunk-qrcode-img\" src={item.qrcodeDataURL} alt={`QRCode Chunk #${index+1}`}></img>\n                <div className=\"chunk-operations\">\n                  <button className=\"chunk-qrcode-download\" type=\"button\" onClick={() => downloadQRCodeChunk(index+1, item.qrcodeDataURL)}>\n                    <Icon path={mdiDownload} size={1} title=\"Download\" />\n                    <span>Download QRCode #{index+1}</span>\n                  </button>\n                  <div className=\"chunk-ops-andor\">and/or</div>\n                  <div className=\"chunk-data\">{item.data}</div>\n                  <button className=\"chunk-secret-copy\" type=\"button\" onClick={() => copySecretChunkToClipboard(index+1, item.data)}>\n                    <Icon path={mdiContentCopy} size={1} title=\"Copy\" />\n                    <span>Copy Secret #{index+1}</span>\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default Encrypt;\n","import React from \"react\";\n\nfunction Decrypt() {\n  return <h2>TODO: Decrypt Page</h2>;\n}\n\nexport default Decrypt;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, NavLink, Redirect } from \"react-router-dom\";\nimport Icon from '@mdi/react';\nimport { mdiLock , mdiLockOpenVariant, mdiGithub } from '@mdi/js';\nimport Encrypt from './pages/Encrypt';\nimport Decrypt from './pages/Decrypt';\n\nfunction App() {\n  return (\n    <Router>\n      <header>\n        <nav>\n          <ul>\n            <li>\n              <NavLink to=\"/secured-recovery\" activeClassName=\"is-active\" exact={true}>\n                <Icon path={mdiLock} size={1}/>\n                <span>Encrypt</span>\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"/decrypt\" activeClassName=\"is-active\" exact={true}>\n                <Icon path={mdiLockOpenVariant} size={1}/>\n                <span>Decrypt</span>\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n      </header>\n      <main className=\"content\">\n        <Switch>\n          <Route path=\"/decrypt\">\n            <Decrypt />\n          </Route>\n          <Route path=\"/secured-recovery\">\n            <Encrypt />\n          </Route>\n          <Route render={() => <Redirect to=\"/secured-recovery\" />}/>\n        </Switch>\n      </main>\n      <footer>\n        <small className=\"copyright\">\n          <span>\n            &copy; Tanase Butcaru / MIT License / Secured Recovery v{process.env.REACT_APP_VERSION}\n          </span>\n          <a href=\"https://github.com/tbutcaru/secured-recovery\" target=\"_blank\" rel=\"noreferrer\" title=\"Secured Recovery on GitHub\">\n            <Icon path={mdiGithub} size={1}/>\n          </a>\n        </small>\n      </footer>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}